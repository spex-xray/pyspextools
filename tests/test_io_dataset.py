
# Generated by CodiumAI

import pytest
import os
from pyspextools.io.dataset import Dataset
from pyspextools.io.region import Region
from pyspextools.io.spo import Spo
from pyspextools.io.res import Res


class TestDataset:
    """
    Code Analysis

    Main functionalities:
    The Dataset class is a general class that contains a dataset with multiple regions. It allows users to read, write,
    and manipulate spectral datasets. The class can read one or all regions from a spo and res file, append a region
    object to the dataset, write one or all regions to spo and res files, assign new sector and region numbers to a
    specific region, and show a summary of the entire dataset.

    Methods:
    - read_region: reads one region with a specific sector and region number from spo and res files and adds it to
      the dataset.
    - read_all_regions: reads all regions from spo and res files and adds them to the dataset.
    - append_region: appends a region object to the dataset.
    - write_region: writes one region to spo and res files.
    - write_all_regions: writes all regions in the dataset to spo and res files.
    - assign_sector: assigns a new sector number to a specific region.
    - assign_region: assigns a new region number to a specific region.
    - assign_sector_region: assigns a new sector and region number to a specific region.
    - show: shows a summary of the entire dataset.

    Fields:
    - regions: a list of regions in the dataset.
    - config: a numpy array that contains the response configuration (combinations of sector and region values).
    """

    def test_read_region(self):
        """Tests that a region can be read from a spo and res file and added to the dataset."""
        dataset = Dataset()
        dataset.read_region(1, 1, 'data/test.spo', 'data/test.res', 'test')
        assert len(dataset.regions) == 1
        assert dataset.config[0][0] == 1
        assert dataset.config[0][1] == 1

    def test_read_all_regions(self):
        """Tests that all regions can be read from a spo and res file and added to the dataset."""
        dataset = Dataset()
        dataset.read_all_regions('data/test.spo', 'data/test.res')
        assert len(dataset.regions) == 1
        assert dataset.config[0][0] == 1
        assert dataset.config[0][1] == 1

    def test_append_region(self):
        """Tests that a region object can be appended to the dataset."""
        dataset = Dataset()
        region = Region()
        region.spo = Spo()
        region.res = Res()
        dataset.append_region(region, 1, 1)
        assert len(dataset.regions) == 1
        assert dataset.config[0][0] == 1
        assert dataset.config[0][1] == 1

    def test_write_region(self):
        """Tests that one region can be written to a spo and res file."""
        dataset = Dataset()
        dataset.read_region(1, 1, 'data/test.spo', 'data/test.res', 'test')
        dataset.write_region('data/test_w.spo', 'data/test_w.res', 1)
        assert os.path.exists('data/test_w.spo')
        assert os.path.exists('data/test_w.res')
        os.remove('data/test_w.spo')
        os.remove('data/test_w.res')

    def test_write_all_regions(self):
        """Tests that all regions in the data object can be written to spo and res."""
        dataset = Dataset()
        dataset.read_all_regions('data/test.spo', 'data/test.res')
        dataset.write_all_regions('data/test_w.spo', 'data/test_w.res')
        assert os.path.exists('data/test_w.spo')
        assert os.path.exists('data/test_w.res')
        os.remove('data/test_w.spo')
        os.remove('data/test_w.res')

    def test_read_config(self):
        """Tests that the response configuration can be read."""
        dataset = Dataset()
        res = Res()
        res.read_file('data/test.res')
        config = dataset.read_config(res)
        assert config[0][0] == 1
        assert config[0][1] == 1

    def test_assign_sector(self):
        """Tests that a new sector number can be assigned to a specific region."""
        dataset = Dataset()
        dataset.read_region(1, 1, 'data/test.spo', 'data/test.res')
        dataset.assign_sector(1, 2)
        assert dataset.regions[0].res.sector[0] == 2

    def test_assign_region(self):
        """Tests that a new region number can be assigned to a specific region."""
        dataset = Dataset()
        dataset.read_region(1, 1, 'data/test.spo', 'data/test.res')
        dataset.assign_region(1, 2)
        assert dataset.regions[0].res.region[0] == 2

    def test_assign_sector_region(self):
        """Tests that a new sector and region number can be assigned to a specific region."""
        dataset = Dataset()
        dataset.read_region(1, 1, 'data/test.spo', 'data/test.res')
        dataset.assign_sector_region(1, 2, 3)
        assert dataset.regions[0].res.sector[0] == 2
        assert dataset.regions[0].res.region[0] == 3
